<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                        
<!-- 네임스페이스(사용영역) 설정 -->
<mapper namespace="com.euishoe.Review">
	
	<!-- 리뷰 작성  -->
	<insert id="createReview" parameterType="Map">		            
		INSERT INTO reviews 
		            (review_num, 
		             customer_id, 
		             product_num, 
		             review_content,
		             review_score, 
		             review_isdeleted,
		             review_isanswered,
		             review_password,
		             review_regdate) 
		VALUES  (reviews_seq.NEXTVAL, 
		             #{customerId}, 
		             #{productNum}, 
		             #{reviewContent}, 
		             #{reviewScore},
		             'N', 
		             'N',
		              #{reviewPassword},
		             sysdate)
	</insert>
	
		<!-- 리뷰 작성  -->
	<insert id="createReview2" parameterType="com.euishoe.reviews.dto.Review">		            
		INSERT INTO reviews 
		VALUES  (reviews_seq.NEXTVAL, 
		             #{customerId}, 
		             #{productNum}, 
		             #{reviewTitle}, 
		             #{reviewContent},
		             #{reviewPassword},
		             #{reviewScore},
		             'N', 
		             sysdate,
		             'N')
	</insert>
	
	<delete id="deleteReview" parameterType="int">
		DELETE INTO reviews
		WHERE review_num = #{reviewNum}
	</delete>


	 <resultMap type="com.euishoe.products.dto.ProductInfo" id="ProductInfo">
		<result property="productNum" column="product_num"/>
    	<result property="productListNum" column="product_list_num"/>
    	<result property="productName" column="product_name"/>
    	<result property="productCost" column="product_cost"/>
    	<result property="productPrice" column="product_price"/>
    	<result property="productBriefInfomation" column="product_brief_information"/>
    	<result property="productManufacturer" column="product_manufacturer"/>
    	<result property="productReleaseDate" column="product_release_date"/>
    	<result property="productOrigin" column="product_origin"/>
    	<result property="productListPrice" column="product_list_price"/>
    	<result property="colorCode" column="color_code"/>
    	<result property="productHitcount" column="product_hitcount"/>
    	<result property="productBody" column="product_body"/>
    	<result property="productShoulder" column="product_shoulder"/>
    	<result property="productArm" column="product_arm"/>
    	<result property="productLeg" column="product_leg"/>
    	<result property="productSeason" column="product_season"/>
    	<result property="productFabric" column="product_fabric"/>
    	<result property="productTpo" column="product_tpo"/>
	</resultMap> 
	
	<resultMap type="com.euishoe.reviews.dto.Review" id="Review">
		<result property="reviewNum" column="review_num"/>
    	<result property="customerId" column="customer_id"/>
    	<result property="productNum" column="product_num"/>
    	<result property="reviewTitle" column="review_title"/>
   		<result property="reviewContent" column="review_content"/>
   		<result property="reviewPassword" column="review_password"/>
   		<result property="reviewScore" column="review_score"/>
   		<result property="reviewIsDeleted" column="review_isdeleted"/>
   		<result property="reviewIsAnswered" column="review_isanswered"/>
   		<result property="reviewRegdate" column="review_regdate"/>
		<collection property="productInfo" resultMap="ProductInfo"/>
	</resultMap>
	
<!-- 해당 제품의 모든 리뷰 출력(페이징)  -->
	<select id="selectDynamicReviewList" parameterType="Map" resultType="Map">
		SELECT 		request_page,
					review_num,
					customer_id,
					product_num,
		      		review_title,
					review_content,
					review_password,
					review_score,
					review_isdeleted,
					review_isanswered,
					To_char(review_regdate, 'YY-MM-DD HH:MM') review_regdate
       FROM(SELECT CEIL(rownum / #{listSize}) request_page,
       						review_num,
							customer_id,
							product_num,
							review_title,
							review_content,
							review_password,
							review_score,
							review_isdeleted,
							review_isanswered,
							review_regdate
							FROM	(SELECT review.review_num,
											review.customer_id,
											pi.product_num,
											review.review_title,
											review.review_content,
											review.review_password,
											review.review_score,
											review.review_isdeleted,
											review.review_isanswered,
											review.review_regdate
									 FROM    reviews review
									 JOIN 	 product_infos pi
									 ON   	 review.product_num = pi.product_num
							WHERE pi.product_num = #{productNum}
					<choose>
					 <when test="customerId != null">
					<!-- 비밀글 제외 조회  -->
					 AND customer_id = #{customerId}
					 <choose>
					 	<when test='reviewScore != 0'>
							 <!-- 유저 아이디 검색조건 추가  -->
							 AND review_score = #{reviewScore}
						</when>							 
					 <!-- 문의유형에 따른 조회  -->
					 </choose>
					 </when>
					 <otherwise>
					 	<choose>
					 	<when test='reviewScore != 0'>
							 <!-- 유저 아이디 검색조건 추가  -->
					 			AND review_score = #{reviewScore}
							 </when>
					 	</choose>
					 </otherwise>
				 </choose>
				 ORDER BY review_regdate DESC))
		WHERE request_page = #{page}					
	</select>


	<!-- 자기가 쓴 리뷰 조회(페이징) -->
	<select id="selectReviewUserById" parameterType="Map" resultMap="Review">
		SELECT customer_id,
		       		review_title,
					review_content,
					review_password,
					review_score
       FROM(SELECT CEIL(rownum / #{listSize}) request_page,
									                    customer_id,
									                    review_title,
									                    review_content,
									                    review_password,
									                    review_score
									                    FROM(SELECT review.customer_id,
												                              review.review_title,
												                              review.review_content,
												                              review.review_password,
												                              review.review_score,
												                              pi.product_num
												                  FROM 	  reviews review
												                  JOIN 	  product_infos pi
												                  ON   	  review.product_num = pi.product_num)
				 WHERE product_num = #{productNum} AND customer_id = #{customerId})
		WHERE request_page = #{page}				 
	</select>
	
	<!-- 별점으로 조회(페이징) -->
	<select id="selectReviewByScore"  parameterType="Map" resultMap="Review">
		SELECT customer_id,
		       		review_title,
					review_content,
					review_password,
					review_score
       FROM(SELECT CEIL(rownum / #{listSize}) request_page,
									                    customer_id,
									                    review_title,
									                    review_content,
									                    review_password,
									                    review_score
									                    FROM(SELECT review.customer_id,
												                              review.review_title,
												                              review.review_content,
												                              review.review_password,
												                              review.review_score,
												                              pi.product_num
												                  FROM 	  reviews review
												                  JOIN 	  product_infos pi
												                  ON   	  review.product_num = pi.product_num)
				 WHERE product_num = #{productNum} AND review_score = #{reviewScore})
	WHERE request_page = #{page}				 
	</select>

	
	<select id="countBySearch"  parameterType="int" resultType="int">
		SELECT COUNT(review_num) count
		FROM   reviews
		WHERE  product_num = #{productNum}
	</select>
	
</mapper>